/*
 * Copyright (c) 2025 Linus Andera
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'java-library'
    id 'signing'
}

group = 'de.linusdev'
archivesBaseName = 'lutils'
version = lutils_version

targetCompatibility = JavaVersion.VERSION_17
sourceCompatibility = JavaVersion.VERSION_17
compileJava.options.encoding = 'UTF-8'

tasks.named('compileJava') {
    options.javaModuleVersion = provider { project.version }
}

jar {
    manifest {
        attributes('Automatic-Module-Name': 'de.linusdev.lutils')
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
    title = "LUtils"

    configure(options) {
        tags(
                'implNote:a:Implementation Note:',
                'implSpec:a:Implemenatation Requirements:',
                'apiNote:a:API Note:'
        )
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    api 'org.jetbrains:annotations:26.0.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'
}

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            if(project.hasProperty("ossrhTokenUserName") && project.hasProperty("ossrhTokenPassword")){
                name = "OSSRH"
                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username = ossrhTokenUserName
                    password = ossrhTokenPassword
                }

            }else {
                project.logger.lifecycle("no OSSRH username and password given. Cannot deploy.")
            }
        }

        maven {
            if(project.hasProperty("githubUsername") && project.hasProperty("githubToken")){
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/lni-dev/LUtils")
                credentials {
                    username = githubUsername
                    password = githubToken
                }
            }else {
                project.logger.lifecycle("no github username and token given. Cannot publish package.")
            }
        }
    }

    publications {

        mavenJava(MavenPublication) {
            artifactId = 'lutils'
            from components.java
            pom {
                name = 'LUtils'
                description = 'Utils Library'
                url = 'https://www.linusdev.de/lutils'
                groupId = 'de.linusdev'
                version = project.version

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'linusdev'
                        name = 'Linus Andera'
                        email = 'linus@linusdev.de'
                        organizationUrl = 'https://www.linusdev.de'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/lni-dev/LUtils.git'
                    developerConnection ='scm:git:ssh://github.com/lni-dev/LUtils.git'
                    url = 'https://github.com/lni-dev/LUtils/tree/master'
                }
            }
        }
    }
}

signing {
    if(project.hasProperty("signing.keyId") && project.hasProperty("signing.password") && project.hasProperty("signing.secretKeyRingFile")){
        sign publishing.publications.mavenJava
    }else {
        project.logger.lifecycle("No Signing information given. Cannot sign.")
    }
}